<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[javaScript学习之事件绑定与取消、动画]]></title>
    <url>%2F2018%2F04%2F12%2FjQuery%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97------%E6%A6%82%E5%BF%B5%E3%80%81%E7%AC%A6%E5%8F%B7%E3%80%81%E9%80%89%E6%8B%A9%E5%99%A8%E3%80%81%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E4%B8%8E%E5%8F%96%E6%B6%88%E3%80%81%E7%AE%80%E5%8D%95%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[写在前面 简介 引入及符号 选择器 事件绑定与取消 简单动画 一、简介（1）jQuery简介：是一个快速、功能多且小巧的javaScript库，是 john Resig 为了简化代码而作 （2）版本：1.x.x/2.x.x/3.x.x 这3个版本的语法基本相同 需要注意的是：IE6/7/8兼容的最高版本的jQuery为1.9.1 二、引入及符号（1）只需要在页面的&lt;head&gt;中引入jQuery文件即可。 例如：`&lt;script src = &quot;jqueryPath/jquery.js&quot;&gt;&lt;/script&gt;` （2）$符号：jQuery符号 三、选择器 基本选择器 #id 根据id匹配元素 element 根据元素标签名匹配元素 .class 根据类名匹配元素 *匹配所有元素(不包括doctype) 多项选择器 $(&quot;selector1,selector2,selectorN&quot;);将每一个选择器匹配到的元素合并后一起返回。 层级选择器： 祖先后代选择器 $(&#39;ancestor descendant&#39;);匹配指定祖先元素下的所有后代 直接后代选择器（子选择器）$(&#39;parent &gt; child&#39;);匹配指定父元素下的所有子元素 next选择器 $(&#39;prev + next&#39;);匹配紧接在指定prev元素后的next元素。 兄弟选择器 $(&#39;prev ~ siblings&#39;);匹配指定prev元素后所有siblings元素。 属性选择器： 属性名选择器：[attribute] 非属性值选择器:[attribute!=value] 属性值选择器：[attribute = value] 包含value值的属性:[attribute*=value] 以value值开头的属性:[attribute^=value] 以value值结尾的属性:[attribute$=value] 多个属性选择器 [selector1][selector2][selectorN]:选择同时满足这几个条件的元素 过滤器： child系列 ：first-child ：last-child ：nth-child(n | even | odd | formula)，其中n为从1开始,even表示偶数，odd表示奇数，formula使用特殊公式 ：nth-last-child(n | even | odd | formula)，倒数第几个孩子,其中n为从1开始,even表示偶数，odd表示奇数，formula使用特殊公式 ：only-child type系列 ：first-of-type ：last-of-type ：nth-of-type(n | even | odd | formula)其中n为从1开始,even表示偶数，odd表示奇数，formula使用特殊公式 ：nth-last-of-type(n | even | odd | formula)其中n为从1开始,even表示偶数，odd表示奇数，formula使用特殊公式 ：only-of-type 表单相关： ：input ：text ：password/:radio/:checkbox/:image/:reset/:button/:file :enabled匹配可用元素 :disabled匹配不可用元素 :checke匹配被选中元素 :selected匹配选中的option元素 查找和过滤 find(expr | object | element)搜索与指定表达式匹配的元素 children([expr])取得匹配的元素集合的所有子元素的元素集合 parent([expr])取得匹配元素父元素的元素集合。 next([expr])、prev([expr])取得匹配元素集合紧邻的后面同辈元素的元素集合。 eq(index | -index)获取第n个jQuery对象。 siblings([expr])取得匹配的元素集合所有同辈元素的元素集合。 filter(expr | object | element | fn)筛选出与指定表达式匹配的元素集合 四、事件绑定与取消（1）事件绑定 on(events, [selector], [data] ,fn)：在元素上绑定一或多个事件（2）事件取消 off(events,[selector],[fn])：在元素上移除一或多个事件（3）一次性事件 one(type,[selector],[data],fn)：为元素的绑定一个一次性的事件 五、简单动画（1）自定义动画 animate()：参数为动画最终的状态和时间 stop()..animate({...},毫秒) 停止上一次的动画避免移动速度过快引起延迟的效果 （2）delay()：可以实现动画暂停 （3）动画函数 show()/hide()：传递时间参数或者是关键词，比如slow，fast等，就可以形成逐渐显示或消失的动画效果 toggle()：根据元素当前状态来决定是显示还是消失 fadeIn()： 淡入动画 fadeOut()： 淡出动画 fadeToggle()： 切换淡入淡出动画 slideUp()/slideDown()：在垂直方向逐渐展开或收缩，其中slideUp是隐藏，slideDown是显示，类似百叶窗的效果 slideToggle()：根据元素是否可见来决定下一步动作]]></content>
      <tags>
        <tag>事件绑定与取消</tag>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javaScript学习之事件、BOM、BOM对象]]></title>
    <url>%2F2018%2F03%2F28%2FjavaScript%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97------%E4%BA%8B%E4%BB%B6%EF%BC%8C%20BOM%EF%BC%8CBOM%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[写在前面 事件 BOM 部分BOM对象 window location navigator 一、事件（1）事件就是文档或浏览器窗口中发生的一些特定的交互瞬间。 （2）HTML事件：直接在HTML元素标签内添加事件，执行脚本 &lt;tag 事件 = “执行脚本” &gt;&lt;/tag&gt; 功能：在HTML元素上绑定事件 (3) 通过DOM查找方法获取HTML元素 ele.事件 = 执行脚本 功能：在DOM对象上绑定事件 (4) 常用事件： onload：页面加载时触发 onclick：鼠标点击触发 onmouseover：鼠标滑过触发 onmouseout：鼠标离开触发 onfocus：获得焦点触发 onblur：失去焦点触发 onchange：内容改变触发 onsubmit：点击提交按钮 onmousedown：按下鼠标触发 onmousemove：鼠标移动触发 onmouseup：在元素上松开鼠标触发 onresize：调整窗口大小触发 onscroll：拖动滚动条触发 onkeydown：按下键盘触发 onkeypress：按下字母或数字键盘触发 onkeyup：松开键盘按键触发 二、BOM（1）、BOM（ browser object model ) 浏览器对象模型 （2）、BOM对象：window、navigator、screen、history、location、document、event 三、部分BOM对象1、window对象（1）、window对象既是通过javaScript访问浏览器窗口的接口之一，又是Global对象。 （2）、window对象的方法： window.alert (&quot;警告信息&quot;)：弹出警告信息 window.confirm(&quot;确认信息&quot;):弹出确认信息 window.prompt(&quot;要在对话框中显示的传文本，默认的输入文本“)：弹出提示信息 window.open(子窗口url，子窗口名，参数)：打开一个新的浏览器窗口或查找已知的窗口 window.close()：关闭浏览器窗口 2、location对象（1）location对象提供当前窗口文档相关信息以及导航功能。（2）常用属性： location.href：重定向页面 location.hash：返回url中的hash(#号后跟零或多个字符） location.host：返回服务器名称和端口号 location.hostname：返回服务器名称 location.pathname：返回目录和文件名 location.port：返回端口号 location.protocol：返回使用协议 location.search：返回查询字符串 (3) 常用方法： location.replace(url)：重定向url location.reload()：重新加载当前显示页面 3、navigator对象（1）提供浏览器的信息、版本、类型等 appCodeName：浏览器名称 appName：完整的浏览器名称 userAgent：识别浏览器名称、版本、引擎以及操作系统等]]></content>
      <tags>
        <tag>事件</tag>
        <tag>BOM</tag>
        <tag>BOM对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javaScript学习之函数、内置对象]]></title>
    <url>%2F2018%2F03%2F15%2FjavaScript%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-----%E5%87%BD%E6%95%B0%E3%80%81%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[写在前面 函数 内置对象 数组Array 字符串String Math对象 Date对象 一、函数（1）函数的定义123function functionName ( [arg0,arg1,...argn] )&#123; statements;&#125; (2) 函数作用：封装任意多条语句，便于随时随地调用。 (3) 函数的调用：函数名（[arg1,arg2,...argn]） 二、内置对象1、数组Array：存储一组数据。 数组的每一项都可以是不同的类型 数组长度可以动态变化 （1）创建数组： Array构造函数：new Array() 数组字面量：由一对包含数组项的方括号[ ]表示，多个数组项之间以逗号隔开。 （2）数组元素的读写： 读写时，使用方括号[ ]并提供相应的索引。 说明：索引是从0开始的正整数 （3）数组长度： array.length：获取数组长度 （4）数组的方法： push()：参数顺序添加到数组尾部，返回的为新数组的长度 unshift()：把参数顺序添加到数组开头，返回的为新数组的长度 pop()：删除数组末尾元素，返回被删除元素 shift() ：删除数组第一个元素，返回被删除元素 join() ：用于将数组转换为字符串，返回字符串 reverse()：颠倒数组中元素的顺序，返回数组 sort()：对数组的元素进行排序，返回数组 降序：arr.sort(function (a,b) { return b-a } ); 升序：arr.sort(function (a,b) { return a-b } ); concat()：连接两个或多个数组，返回数组 slice()：从已有的数组中返回选定的元素 start(必需）规定从何处开始选取，如是负数，从数组尾部开始算起。若从头开始选取，则start为0； end（可选）规定从何处结束选取，是数组片段结束处的数组下标。 splice()：删除数组项、插入数组项、替换数组项 indexOf()：从数组的开头找到的第一个的位置。返回查找的项在数组中的位置或-1 lastIndexOf()：从数组的末尾开始找到的第一个的位置。返回查找的项在数组中的位置或-1 2、字符串String charAt()：返回字符串对象中index位置的字符 charCodeAt()：返回字符串对象中index位置字符的字符编码。 indexOf()：从字符串中搜索子字符串，并返回子字符串的位置或-1 lastIndexOf()：从字符串中搜索子字符串，并返回子字符串的位置或-1 slice()：截取字符串 start：必需，指定开始位置 end：可选，指定结束位置（不包括） 当参数为负数时，会将传入的负值与字符串的长度相加 substring()：语法及功能同slice()完全一样。但是当参数为负数时，自动将参数转换为0 substr()：截取子字符串 split()：把字符串分割成字符串数组。 replace()：在字符串中进行替换，不会改变原来的字符串 toUpperCase() ：把字符串转换成大写，原来的字符串并没有改变 toLowerCase()：把字符串转换为小写，原来的字符串并没有改变 3、Math对象 Math.min()：求一组数的最小值。返回数值 Math.max()：求一组数的最大值。返回数值 Math.ceil()：向上取整，即返回大于指定数的最小整数。 Math.floor()：向下取整，返回指定数的整数部分 Math.round()：数值四舍五入 Math.abs()：返回绝对值 Math.random()：返回大于等于0小于1的一个随机数 求n到m之间的随机整数的公式random = Math.floor(Math.random()*(m-n+1)+n); 4、Date对象(1) new Date()：创建一个日期时间对象 (2) date对象获取时间常用方法： getFullYear()：返回年份 getMonth()：返回月份，返回值为0-11，其中0为1月，11为12月 getDate()：返回天数 getDay():返回星期，返回值为0-6，0表示周日 getHours():返回小时 getMinutes():返回分 getSeconds():返回秒 getTime():返回表示日期的毫秒数 （3）、date对象设置时间的方法 setFullYear(year):设置年份 setMonth(mon)：设置月份，从0开始，0表示1月 setDate()：设置日期 setDay()：设置星期，从0开始，0表示星期日 setHours()：设置小时 setMinutes():设置分 setSeconds():设置秒 setTime():以毫秒数设置日期]]></content>
      <tags>
        <tag>函数</tag>
        <tag>内置对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javaScript学习之数据类型、操作符与表达式]]></title>
    <url>%2F2018%2F03%2F05%2FjavaScript%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97------%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[写在前面 javaScript基础知识 标识符 数据类型 操作符 流程控制语句 continue与break 一、JavaScript基础知识（1）、JavaScript是一种基于对象和事件驱动的客户端脚本语言，起源于Netscape公司的LiveScript语言。 （2）引入： 在HTML中直接使用JavaScript：可以在&lt;head&gt;或&lt;body&gt;中使用&lt;script&gt;嵌入JavaScript脚本。例如： 12345&lt;head&gt; &lt;script&gt; js脚本 &lt;/script&gt;&lt;/head&gt; 引入外部文件，例如&lt;script src = &quot;*.js &quot;&gt;&lt;/script&gt; （3）注释： // ：单行注释 /**/：多行注释 二、标识符（1）标识符包括变量、函数、属性名、参数 （2）标识符命名规则： 由字母、数字、_ 或 $ 组成 不以数字开头 不能是关键字、保留字 （3）变量 声明：var ，例如：var a ;一次声明多个变量用逗号隔开，例如var a,b ; 赋值：例如：var a = 1 ; 不使用var声明的为全局变量 三、数据类型（1）数据类型： 简单（基本）数据类型 String 由双引号或单引号表示 Number 整数和浮点数 NaN：即非数值（Not a Number）是一个特殊的数值。 isNaN(n)：功能：检测n是否是“非数值” Boolean Undefined 无定义 Null 空对象指针 undefined派生于null，所以undefined== null为true 复杂数据类型 Object （2）、typeof 可以使用typeof来检测变量类型，返回string类型，例如：12var a = 1;console.log(typeof a ); （3）、转换函数 将非数值转换为数值 Number()：可用于所有的数据类型 parseInt()：用于以数字开头的字符串 parseFloat()：用于以数字开头的字符串，提供第二个参数来指定转换使用的基数 将非字符串转换为字符串 toString()：用于数值、布尔值、对象 String()：可用于所有数据类型 转换为布尔型 Boolean()：1、0，”“，null，undefined → false，其余的转换为布尔型为true 四、操作符（1）分类： 算数操作符 加：+ 减：- 乘：* 除：/ 取余：% 递增：++a 或 a++ 递减：--a或 a-- 逻辑操作符 &amp;&amp;：与：只有所有条件都为true，才会返回true ||：或：只要有一个为true，就会返回true !：非：取反 赋值操作符 = +=、-=、*=、/=、%= 比较操作符 == 、===、!=、!== &gt;、&lt;、&gt;=、&lt;= 三元操作符 语法：条件？代码1：代码2 如果条件成立，就执行代码1，否则执行代码2 五、流程控制语句（1）、条件语句 1、if语句：123if ( condition条件 ) &#123; 代码块;&#125; 如果执行的语句只有一句，那么大括号{}可以省略，否则就不可以省略。123456if ( condition条件) &#123; 代码块1;&#125; else &#123; 代码块2;&#125; 多种判断条件：1234567if ( condition条件 ) &#123; 代码块1;&#125; else if(condition)&#123; 代码块2;&#125;...else&#123; 代码块3;&#125; 2、switch语句：用于多条件的判断1234567891011switch （ expression )&#123; // 该表达式是表示要判断的内容 case value: statement break; // 用来退出的 case value: statement break; ...... default: statement // 上述情况都不对，采用此&#125; （2）、循环语句 1、for语句：123for (语句1；语句2；语句3）&#123; 代码块；&#125; 语句1：在循环（代码块）开始前执行 语句2：定义运行循环（代码块）的条件 语句3：在循环（代码块）已被执行之后执行 2、while语句123while(条件)&#123; 代码块;&#125; 3、do-while语句123do&#123; 代码块;&#125;while(条件) 说明：这种语法的循环至少要被执行一次。 六、continue与break continue：结束本次循环，然后开始下一次。 break：立即退出循环]]></content>
      <tags>
        <tag>数据类型</tag>
        <tag>操作符</tag>
        <tag>表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css学习之定位机制、定位模型]]></title>
    <url>%2F2018%2F02%2F28%2FCSS%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97------CSS%E5%AE%9A%E4%BD%8D%E6%9C%BA%E5%88%B6%E3%80%81%E5%AE%9A%E4%BD%8D%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[写在前面 CSS定位机制 普通流（标准流） 浮动 定位模型 一、CSS定位机制1、普通流（标准流）普通流（标准流）：默认，元素自动从上往下，从左往右的排列。 2 、浮动（1）浮动：实现块级元素在一行内展示。 （2）浮动规则 元素向左 / 右移动 浮动元素脱离标准流 浮动元素碰到包含框或另一个浮动框，浮动停止 浮动元素之后的元素将围绕它，之前的不受影响 （3）浮动的基本语法：position:left（靠左）、position:right（靠右）、position：center（无） （4）浮动溢出：元素使用浮动后会脱离普通流，出现“浮动溢出“ （5）清除浮动（闭合浮动）： 语法： clear:none（默认) | left | right | both 常用方法： 使用空元素。例如&lt;div class = &quot;clear&quot;&gt;&lt;/div&gt; 给浮动元素的父元素添加overflow:hidden 使用after伪元素 3、定位模型（1）static：静态定位（默认） 元素位于普通流中，元素自动从上往下，从左往右的排列。 （2）relative：相对定位 相对的是它自己原来的位置进行偏移，不会离开普通流 使元素成为可定位的祖先元素，绝对定位的后代可以相对于该元素进行绝对定位 z-index：控制元素层叠顺序 （3）absolute：绝对定位 使元素脱离普通流 根据最近定位祖先元素来定位，如果没有，则为&lt;body&gt; z-index：控制元素层叠顺序 （4）fixed：固定定位模型 与绝对定位absolute类似 固定定位元素不会随着视口滚动而滚动 （5）sticky：磁贴定位 结合相对定位relative和固定定位fixed的特点 不脱离常规流 如果最近祖先元素有滚动，则它相对最近祖先元素进行偏移，否则相对于视口进行偏移]]></content>
      <tags>
        <tag>定位机制</tag>
        <tag>定位模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css学习之盒子模型、背景样式、列表样式]]></title>
    <url>%2F2018%2F02%2F25%2Fcss%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E3%80%81%E8%83%8C%E6%99%AF%E6%A0%B7%E5%BC%8F%E3%80%81%E5%88%97%E8%A1%A8%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[写在前面 盒子模型 宽度 高度 边框 内边距 外边距 IE盒子模型 display属性 背景样式 列表样式 一、盒子模型： 1、宽度 宽度：width：长度值 / 百分比 / auto 最大宽度：max-width：长度值 / 百分比 / auto 最小宽度：min-width：长度值 / 百分比 / auto2、高度 高度：height：长度值 / 百分比 / auto 最大高度：max-height：长度值 / 百分比 / auto 最小高度：min-height：长度值 / 百分比 / auto3、边框属性 边框宽度（border-width)：设置元素边框宽度: thin/medium/thick/长度值（px、em等） 边框颜色（border-color）: 设置元素边框颜色：颜色/transparent 边框样式（border-style）：设置元素边框样式 none/hidden：无 dotted : 点状 dashed：虚线 solid：实线 double：双线 groove：3D凹槽 ridge：3D垄状 inset： 3D inset outset：3D outset inherit：继承 注意：有上、下、左、右四个不同的方向：border-top/bottom/left/right-width/color/style 4、内边距（1）概念：元素的内容与边框之间的距离 （2）分为4个方向：padding-top/right/bottom/left：长度值/百分比 （3）简写：padding：值1 值2 值3 值4 可以缩写 5、外边距属性（1）概念：元素与元素之间的距离 （2）分为4个方向：margin-top/right/bottom/left：长度值/百分比 （3）简写：margin：值1 值2 值3 值4 可以缩写 （4）垂直方向：两个相邻元素都设置外边距，则外边距为高度中最大值 二、IE盒子模型 如果有DOCTYPE文档类型声明，则按照标准盒子模型来解析。否则，各个浏览器会按照自己的方式解析。 三、display属性（一）HTML元素分类： 块级元素，占一行：例如： &lt;p&gt;、&lt;div&gt;、&lt;h1&gt;~&lt;h6&gt;、&lt;ul&gt;、&lt;li&gt;、&lt;ol&gt;、&lt;dl&gt;、&lt;dt&gt;、&lt;dd&gt;等 行内元素（内联元素），一行内显示。例如： &lt;span&gt;、&lt;a&gt;、&lt;em&gt;等 （二）display属性： inline:元素显示为内联元素，前后无换行符。行内元素不具备宽高属性设置。 block:元素显示为块级元素，前后有换行符。 inline-block:元素呈现为inline，具有block相应特性。 none:元素不显示 四、背景样式 background-color：背景颜色 颜色（rgb，16进制，颜色名）/ transparent 背景区包括内容、内边距和边框，不包括外边距 background-image：背景图片 url（绝对地址 / 相对地址）/ none 默认位置为元素的左上角，并在水平和垂直方向上重复 background-position：背景图像位置 百分比 / 值 / top / right / bottom / left / center background-attachment：背景图像固定或者滚动 scroll：默认，背景图像随滚动条滚动 fixed：图片位置固定 background-repeat：背景图片是否重复以及重复的方式 repeat / no-repeat：重复（水平和垂直方向上均重复） / 不重复 repeat-x / repeat-y：水平 / 垂直重复 background：将上述背景属性简写在一个声明中 五、列表样式 list-style-type：有无列表项以及何种类型的列表项 有序列表 decimal：1，2，… lower-roman：罗马数字（小写） upper-roman：罗马数字（大写） lower-alpha：a，b，… upper-alpha：A，B，… none：无 无序列表 disc：圆点（实心），默认 circle：圆点（空心） square：方块（实心） none：无 list-style-image：列表项为图片 url / none list-style-position: 列表项标志的位置 inside / outside（默认） list-style： 将上述列表项属性简写在一个声明中]]></content>
      <tags>
        <tag>盒子模型</tag>
        <tag>背景样式</tag>
        <tag>列表样式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css学习之css引用、优先级、选择器、继承和层叠]]></title>
    <url>%2F2018%2F02%2F23%2Fcss%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97------css%E5%BC%95%E7%94%A8%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7%E3%80%81%E9%80%89%E6%8B%A9%E5%99%A8%E3%80%81%E7%BB%A7%E6%89%BF%E5%92%8C%E5%B1%82%E5%8F%A0%2F</url>
    <content type="text"><![CDATA[写在前面 CSS基础语法 CSS引用 行内样式 内部样式 外部样式 CSS导入式 优先级 选择器 CSS继承 CSS层叠 一、CSS基础语法（1）CSS：层叠样式表（Cascsding Style Sheets） （2）CCS样式：CSS样式规则是由选择器+声明构成，例如：p{font-size:16px;color:blue;} （3）注释：/*注释内容*/ 二、CSS引用（1）、行内样式（内联样式） 位置：在开始标签内添加 例如：&lt;p style=&quot;font-size:25px&quot;&gt;内容&lt;/p&gt; （2）、内部样式（嵌入样式） 位置：写在&lt;head&gt;标签内 例如：12345&lt;head&gt; &lt;style type=&quot;text/css&quot;&gt; css样式... &lt;/style&gt;&lt;/head&gt; （3）外部样式（外联样式） 位置：一个单独的文件，*.css 例如：&lt;link href=&quot;*.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt; （4）、CSS导入式 位置：&lt;style&gt;标签内部 例如： @import url(*.css) 或 @import “外部CSS样式”123&lt;style type=&quot;text/css&quot;&gt; @import url(*.css)&lt;/style&gt; 三、优先级 行内样式&gt;内部样式&gt;外部样式 链入外部样式表和内部样式表是依据就近原则 四、选择器 标签选择器 以HTML标签作为选择器。例如 h6 类选择器 .class1 伪类：:Link、:Visited、:Hover、:Active ID选择器 #id1 全局选择器 * 群组选择器 后代选择器 五、CSS继承从父元素那继承部分CSS属性 六、CSS层叠（1）层叠规则 css一个元素可以定义多个样式; 当样式之间不冲突时，多个样式可叠加显示 当样式之间冲突时，按不同样式规则优先级来应用样式 ID选择器 &gt; 类选择器 &gt; 标签选择器 多次定义同类样式，后定义的优先级高 同一样式表中：（1）权值相同：就近原则（2）权值不同： 选择权值高的 （2）选择器权值： 标签选择器：1 &gt; 类选择器和伪类：10 &gt; ID选择器：100 &gt; 通配符选择器：权值为0 &gt; 行内样式：权值为1000 注意：！important优先级高于行内样式，例如：p{font-size:16px !important;}]]></content>
      <tags>
        <tag>CSS引用</tag>
        <tag>优先级</tag>
        <tag>选择器</tag>
        <tag>继承</tag>
        <tag>层叠</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS学习之样式命名规则、文字和文本样式]]></title>
    <url>%2F2018%2F02%2F20%2FCSS%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97------%E6%A0%B7%E5%BC%8F%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E3%80%81%E6%96%87%E5%AD%97%E5%92%8C%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[写在前面 CSS样式命名规则 CSS字体和文本样式 文字 文本 一、CSS样式命名规则 使用字母、数字、”-“ 和”_” 以小写字母开头 可以是单字，连字符，下划线或者是驼峰形式 语义化命名 例如：容器：container 导航：nav 二、CSS字体和文本样式 文字 字体：font-family 字体大小：font-size 绝对单位：in / cm / mm / pt / pc / xx-small / x-small / small / medium / large / x-large / xx-large 相对单位：像素 / em / 百分比 文字颜色：color：rgb() / 16进制 / 颜色名 文字粗细：font-weight：normal / bold / bolder / lighter / 100~900 斜体 ： font-style：normal / italic / oblique 文字变形：font-variant：normal / small-caps 文本 水平对齐： text-align：设置元素内文本的水平对齐方式 left / right / center / justify 行高： line-height 垂直对齐：vertical-align：设置元素内容的垂直方式 baseline / sub /super / top / text-top / middle / bottom / text-bottom / 长度 / 百分比 首行缩进：text-indent word-spacing：设置元素内单词之间的间距，是以空格来分辨单词的 letter-spacing:设置元素内字母之间的间距 text-transform:设置元素内文本的大小写 text-decoration：设置元素内文本的装饰 underline：下划线 overline：上划线 line-through：贯穿线 blink：闪烁线，有兼容性问题 none：无效果，默认为none]]></content>
      <tags>
        <tag>样式命名规则</tag>
        <tag>文字</tag>
        <tag>文本样式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML学习之列表、图像、超链接标签]]></title>
    <url>%2F2018%2F02%2F10%2FHTML%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%97%E8%A1%A8%E3%80%81%E5%9B%BE%E5%83%8F%E3%80%81%E8%B6%85%E9%93%BE%E6%8E%A5%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[写在前面 HTML列表标签 无序列表 有序列表 定义列表 图像标签 超链接标签 内部链接&amp;外部链接 空链接 锚链接 一、HTML列表标签1、无序列表（1）语法1234&lt;ul&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;li&gt;列表项&lt;/li&gt;&lt;/ul&gt; （2）type属性值 disc 原点（实心），默认为此 square 正方形 circle 空心圆 2、有序列表（1）语法1234&lt;ol&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;li&gt;列表项&lt;/li&gt;&lt;/ol&gt; （2）type属性值 1 数字1 , 2… A 字母（大写）A , B… a 字母（小写）a , b… I 罗马数字（大写）I i 罗马数字（小写）i 3、定义列表（1）语法123456&lt;dl&gt; &lt;dt&gt;定义列表项&lt;/dt&gt; &lt;dd&gt;列表项描述&lt;/dd&gt; &lt;dd&gt;列表项描述&lt;/dd&gt; ......&lt;/dl&gt; 注意： 定义标签内可以有多个&lt;dt&gt; 对于每一个&lt;dt&gt;可以有多个&lt;dd&gt; 一般开发中，带摘要的新闻列表、或者是带缩略图或者是其他描述的一些列表等等,可以使用定义列表。 二、图像标签（1）语法：&lt;img src = &quot;&quot; alt = &quot;&quot; .../&gt; （2）属性： src：必需，显示图像的url alt：当由于网速太慢、src属性中的错误、浏览器禁用图像等导致用户无法查看图像，alt属性可以代替图像显示在浏览器中的内容 height：图像的高度，可为数值或者是百分比 width：图像的宽度，可为数值或百分比 三、超链接1、内部链接&amp;外部链接（1）语法：&lt; a href = &quot;&quot; &gt; 内容&lt;/a&gt;（2）href:链接地址，可以是内部链接或外部链接。i：内部链接：可以为绝对路径或者是相对路径。ii： 外部链接：是指从当前网站跳转到另外一个网站中，站外链接，输入外部链接地址就可以了。（3）属性： href：链接地址 target：_self、_blank、_top、_parent ，表示链接的目标 target=_self，默认值，在当前窗口打开新的页面。 target = _blank，表示创建一个新的窗口，打开一个新的页面。 title：链接提示文字：当浏览者的光标停留在超链接上时，提示的内容才会出现。 name：链接命名2、空链接（1）语法：&lt; a href = &quot;#&quot;&gt; 当想要有链接效果，但是又确定不了链接目标的时候，就可以先使用空链接来代替。 3、锚链接（1）语法： 同一页面：12&lt;a href = &quot;#锚名&quot;目录1&lt;/a&gt;&lt;a href = &quot;...&quot; name = &quot;锚名&quot;&gt;内容&lt;/a&gt; 不同页面：12&lt;a href = &quot;网页名称#锚名&quot;&gt;内容&lt;/a&gt;&lt;a name = &quot;锚名&quot;&gt;内容&lt;/a&gt; 注意： 锚名建议使用英文，锚名的位置定义就是跳转到的位置。 先定义锚的位置和锚名称，然后设置寻找锚的链接]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>列表</tag>
        <tag>图像</tag>
        <tag>超链接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML学习——表单]]></title>
    <url>%2F2018%2F02%2F05%2FHTML%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%A1%A8%E5%8D%95%2F</url>
    <content type="text"><![CDATA[写在前面 表单 &lt;input&gt;标签 &lt;select&gt;标签 &lt;form&gt;标签 &lt;textarea&gt;多行文本域 一、表单（1）语法：123&lt;form&gt; 表单元素&lt;/form&gt; （2）表单元素： &lt;input&gt;：输入 &lt;select&gt;：菜单和列表 &lt;option&gt;：菜单和列表项目 &lt;textarea&gt;：多行文本域 &lt;optgroup&gt;：菜单和列表项目分组 二、&lt;input&gt;标签（1）语法：&lt;input type = &quot;类型属性&quot; name = &quot;名称&quot; ....../&gt; （2）&lt;input&gt;标签通过type来决定添加的标签类型。 text：文本域 password：密码域 file：文件域 checkbox：复选域 radio：单选域 button：按钮 submit：提交按钮 reset：重置按钮 hidden：隐藏域 image：图像域 （3）单行文本域 1、语法：123&lt;form&gt; &lt;input type = &quot;text&quot; name = &quot;...&quot; .../&gt;&lt;/form&gt; 2、属性： name：名称 maxlength：用户输入的最大字符长度 size：文本框的宽度，以字符个数为单位；默认为20字符 value：默认值 placeholder：提示信息 （4）文件域： 1、语法：123&lt;form&gt; &lt;input type = &quot;file&quot; name = &quot;...&quot; .../&gt;&lt;/form&gt; （5）单选框： 1、语法：123&lt;form&gt; &lt;input type = &quot;radio&quot; name = &quot;...&quot; value = &quot;...&quot; checked /&gt;&lt;/form&gt; 注意：同一组name值要相同 （6）复选框： 1、语法：123&lt;form&gt; &lt;input type = &quot;checkbox&quot; name = &quot;...&quot; value = &quot;...&quot; checked /&gt;&lt;/form&gt; （7）按钮： 1、语法：123&lt;form&gt; &lt;input type = &quot;button&quot; name = &quot;...&quot; value = &quot;...&quot; /&gt;&lt;/form&gt; type值可为button、submit或reset （8）图像域： 1、语法：123&lt;form&gt; &lt;input type = &quot;image&quot; name = &quot;...&quot; src = &quot;imageurl&quot; /&gt;&lt;/form&gt; （9）隐藏域： 1、语法：123&lt;form&gt; &lt;input type = &quot;hidden&quot; name = &quot;...&quot; value = &quot;...&quot; /&gt;&lt;/form&gt; 三、&lt;select&gt;标签（1）语法：12345&lt;select&gt; &lt;option value = &quot;...&quot; &gt;选项&lt;/option&gt; &lt;option value = &quot;...&quot; &gt;选项&lt;/option&gt; ......&lt;/select&gt; （2）&lt;select&gt;标签属性： name：名称 multiple：设置可选择多个选项 size：列表可见选项数 （3）&lt;option&gt;标签属性 selected：设置选项初始选中状态 value：定义送往服务器的选项值 四、&lt;form&gt;标签（1）语法：123&lt;form action = &quot; &quot; method = &quot; &quot; name = &quot; &quot; ...&gt; 表单元素&lt;/form&gt; （2）属性： action：提交表单时向何处（后台用来处理数据的文件）发送表单数据，值为url method：设置表单发送到指定页面的方式，值为get（默认）或post name：表单名 target：打开action url的位置，值为_blank、_self、_parent、_top enctype：编码，值为application/form-data text/plain等 五、&lt;textarea&gt;多行文本域（1）语法：123&lt;textarea name = &quot;...&quot; rows = &quot;...&quot; cols = &quot;...&quot; ...&gt; 内容...&lt;/textarea&gt;` （2）属性： name：名称 placeholder：提示 rows：可见行数 cols：可见宽度]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>表单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML学习——表格]]></title>
    <url>%2F2018%2F01%2F30%2FHTML%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%A1%A8%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[写在前面 表格结构 一般结构 带表头 带标题 结构化表格 表格table属性 表格其他标签属性 &lt;tr&gt;标签属性 &lt;td&gt;和&lt;th&gt;标签属性 &lt;thead&gt;、&lt;tbody&gt;、&lt;tfoot&gt;标签属性 跨列属性、跨行属性 表格嵌套 表格布局 一、表格结构（1）一般结构：12345678&lt;table&gt; &lt;tr&gt;&lt;!--tr行--&gt; &lt;td&gt;td单元格&lt;/td&gt; &lt;td&gt;td单元格&lt;/td&gt; ... &lt;/tr&gt; ...&lt;/table&gt; （2）带表头123456789&lt;table&gt; &lt;tr&gt; &lt;th&gt;表头，内容加粗居中显示&lt;/th&gt; &lt;td&gt;td单元格&lt;/td&gt; &lt;td&gt;td单元格&lt;/td&gt; ... &lt;/tr&gt; ...&lt;/table&gt; （3）带标题123456789&lt;table&gt; &lt;caption&gt;表格标题，居中显示&lt;/caption&gt; &lt;tr&gt; &lt;td&gt;td单元格&lt;/td&gt; &lt;td&gt;td单元格&lt;/td&gt; ... &lt;/tr&gt; ...&lt;/table&gt; （4）结构化表格123456789101112131415161718&lt;table&gt; &lt;caption&gt;表格标题&lt;/caption&gt; &lt;thead&gt;&lt;!--表格头部--&gt; &lt;tr&gt; &lt;td&gt;td单元格&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt;&lt;!--表格主体--&gt; &lt;tr&gt; &lt;td&gt;td单元格&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt;&lt;!--表格尾部--&gt; &lt;tr&gt; &lt;td&gt;td单元格&lt;/td&gt; &lt;/tr&gt; &lt;tfoot&gt;&lt;/table&gt; 二、表格table属性 width：表格宽度，单位可以是像素或者是百分比 align：控制的是整个表格在水平方向上的位置。有left，center，right border：边框 bgcolor：表格背景颜色，可以是16进制、rgb(x,x,x)或者是颜色名 cellpadding：单元格边沿与内容之间的空白 cellspacing：单元格之间的空白，设为cellspacing = “0”，就可以去掉单元格之间的空隙。 frame：规定外侧边框的可见部分 void：不显示边框 above：显示上部 below：显示下部 hsides：显示上部和下部 vsides：显示左边和右边 lhs：显示左侧 rhs：显示右侧 box：显示所有四边 border：显示所有四边 rules：规定内侧边框的可见部分 none：无线条 groups：行组和列组之间的线条 rows：行之间 cols：列之间 all：行和列之间 三、表格其他标签属性（1）&lt;tr&gt;标签属性 align：行内容的水平对齐：left，center，right，justify，char valign：行内容的垂直对齐：top，middle，bottom，baseline bgcolor：行的背景颜色：16进制、rgb(x,x,x)、颜色名 （2）&lt;td&gt;和&lt;th&gt;标签属性 align：单元格内容的水平对齐：left，center，right，justify，char valign：单元格内容的垂直对齐：top，middle，bottom，baseline bgcolor：单元格背景颜色：16进制、rgb（x,x,x）、颜色名 width：单元格宽度，像素或百分比 height：单元格高度，像素或百分比 （3）&lt;thead&gt;、&lt;tbody&gt;、&lt;tfoot&gt;标签属性 align：水平对齐：left，center，right，justify，char valign：垂直对齐：top，middle，bottom，baseline （4）跨列属性、跨行属性 跨列属性colspan：实现一行跨越多列 跨行属性rowspan：实现一列跨越多行 四、表格嵌套12345678910111213 &lt;table&gt; &lt;tr&gt; &lt;td&gt;内容&lt;/td&gt; &lt;td&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;内容&lt;/td&gt; &lt;td&gt;内容&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 五、表格布局 使用表格来进行页面整体结构的排版布局 布局原则：从大向小；从外向内。 在网页布局中，使用表格进行网页布局的时候， 一般不需要设置border属性]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>表格</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML学习——文档基础、文字和段落]]></title>
    <url>%2F2018%2F01%2F28%2FHTML%E6%96%87%E6%A1%A3%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[写在前面 HTML文档基础 HTML文档基本结构 HTML 元素概念 HTML 标签 注释 网页编码说明 文字和段落 文字&amp;段落标签介绍 标签修饰 特殊符号表示 HTML文档基础HTML文档基本结构 HTML元素概念元素是由开始标签+内容+结束标签组成，如&lt;h1&gt;Hi&lt;/h1&gt;为一个元素，&lt;head&gt;&lt;title&gt;Hi&lt;/title&gt;&lt;/head&gt;也是元素。 标签 标签有开始就要有结束，一般标签都是成对出现的。 在编写代码时，所有的标签符号都要是英文状态下的。 HTML标签属性： 语法：&lt;标签名 属性名1=“属性值” 属性名2=“属性值”...&gt;内容&lt;/标签名&gt; 注释注释：&lt;!--注释内容--&gt; 网页编码设置及说明： 当网页出现乱码时，可以在&lt;head&gt;&lt;/head&gt;添加&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot;/&gt;， 其中http-equiv=&quot;Content-Type&quot;表示文档类型， content=&quot;text/html;charset=utf-8表示内容为html语言，编码为utf-8。 网页编码有：utf-8、GB2312、gbk等编码。其中：utf-8：简体中文、繁体中文、英文、日文等都支持；gb2312:支持简体中文；在国内，utf-8和gb2312使用较多 文字和段落文字&amp;段落标签介绍 标题标签：&lt;h1&gt;&lt;/h1&gt;~&lt;h6&gt;&lt;/h6&gt; 段落标签：&lt;p&gt;&lt;/p&gt; align对齐属性值： left：左对齐 right：右对齐 center：居中对齐 justify：行伸展 换行标签：&lt;br/&gt; 注意： &lt;p&gt;中的所有文字代表的是同一个段落的文字&lt;/p&gt; 不同段落之间是有间隔的 &amp;nbsp;表示一个空格，多个空格就输入多个&amp;nbsp; &lt;pre&gt;&lt;/pre&gt;这其中的内容可以保留在编辑器中输入的格式,&lt;pre&gt;为预格式化标签 &lt;hr/&gt;单标签 标签修饰 文字斜体：&lt;i&gt;&lt;/i&gt;、&lt;em&gt;&lt;/em&gt; 加粗：&lt;b&gt;&lt;/b&gt;、&lt;strong&gt;&lt;/strong&gt; 下标: &lt;sub&gt;&lt;/sub&gt; 上标: &lt;sup&gt;&lt;/sup&gt; 特殊符号表示]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>基础</tag>
      </tags>
  </entry>
</search>
